{{ if .Values.cert.deploy }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-certservice"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/instance: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/part-of: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: helm
    owner: KieniL
  annotations:
    email: test@test.at
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
    container.apparmor.security.beta.kubernetes.io/{{ .Release.Name }}-certservice: runtime/default
spec:
  selector:
    matchLabels:
      app:  "{{ .Release.Name }}-certservice"
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app:  "{{ .Release.Name }}-certservice"
        action: jwt-consumer
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
        container.apparmor.security.beta.kubernetes.io/{{ .Release.Name }}-certservice: runtime/default
        # AGENT INJECTOR SETTINGS
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/agent-run-as-same-user: "true"
        # Application Properties SECRET
        vault.hashicorp.com/agent-inject-secret-application.properties: "k8s_secrets/family/certdb"
        vault.hashicorp.com/agent-inject-command-application.properties: "sh -c 'kill -HUP 1"
        vault.hashicorp.com/secret-volume-path-application.properties: /app/config
        vault.hashicorp.com/agent-inject-template-application.properties: |
          {{`{{- with secret "k8s_secrets/family/certdb" -}}
          server.port=8080
          spring.application.name=cert
          management.health.probes.enabled=true
          management.health.livenessState.enabled=true
          management.health.readinessState.enabled=true
          spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/{{ .Data.db }}
          spring.datasource.username={{ .Data.username }}
          spring.datasource.password={{ .Data.password }}
          spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
          spring.jpa.hibernate.ddl-auto = update
          logging.level.com.kienast.certservice=${CERT_LOG_LEVEL}
          authURL = ${AUTH_URL}
          {{- end }}`}}
        # VAULT SETTINGS
        vault.hashicorp.com/role: 'cert-app'
    spec:
      serviceAccountName: {{ .Release.Name }}-certservice-sa
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: "{{ .Release.Name }}-certservice"
              topologyKey: kubernetes.io/hostname
            weight: 100
      terminationGracePeriodSeconds: 40
      volumes:
      - name: tmp
        emptyDir:
          medium: Memory
          sizeLimit: 200Mi
      securityContext:
        runAsUser: 20000
        runAsGroup: 20000
        runAsNonRoot: true
      containers:
      - name:  "{{ .Release.Name }}-certservice"
        image: luke19/familycertservice@{{ .Values.cert.image }}
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 20000
          runAsGroup: 20000
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          privileged: false
          capabilities:
            drop:
              - all
        volumeMounts:
        - mountPath: /app/tmp
          name: tmp
        resources:
          limits:
            memory: "{{ .Values.cert.resources.memory_limit }}"
            cpu: "{{ .Values.cert.resources.cpu_limit }}"
          requests:
            memory: "{{ .Values.cert.resources.memory_request }}"
            cpu: "{{ .Values.cert.resources.cpu_request }}"
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-config"
              key: TZ
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-config"
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-config"
              key: DB_PORT
        - name: AUTH_URL
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-config"
              key: AUTH_URL
        - name: CERT_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: "{{ .Release.Name }}-config"
              key: CERT_LOG_LEVEL
        ports:
        - containerPort: 8080 #Expose containerport to the pod
        livenessProbe: #Check that pod is ready
          httpGet:
            path: /actuator/health/liveness #path to check
            port: 8080
          initialDelaySeconds: 10 #start checking after 30 seconds
          periodSeconds: 10 #check every 30 seconds
          failureThreshold: 10
        readinessProbe: #Check that pod is healthy
          httpGet:
            path: /actuator/health/readiness #path to check
            port: 8080 #port to check
          initialDelaySeconds: 15 #start checking after 15 seconds
          periodSeconds: 10 #check every 3 seconds
          failureThreshold: 10
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-certservice"
  namespace: {{ .Release.Namespace }}
  labels:
    app: certservice
    app.kubernetes.io/name: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/instance: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/part-of: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: helm
spec:
  type: ClusterIP
  ports:
   - port: 8080
     name: certservice
  selector:
   app: "{{ .Release.Name }}-certservice"
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: "{{ .Release.Name }}-certservice"
  namespace: {{ .Release.Namespace }}
  labels:
    app: certservice
    app.kubernetes.io/name: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/instance: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/part-of: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{ .Release.Name }}-certservice"
  minReplicas: {{ .Values.cert.resources.hpa.min_replica }}
  maxReplicas: {{ .Values.cert.resources.hpa.max_replica }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.cert.resources.hpa.cpu_utilization }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "{{ .Release.Name }}-certservice"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/instance: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: "{{ .Release.Name }}-certservice"
    app.kubernetes.io/part-of: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-certservice"
{{ end }}